https://dbdiagram.io/d/5fe992d19a6c525a03bc7335
docker
tableplus
golang migrate library
sqlc for postgres golang lib


(3)
docker ps
docer ps -a : check all container, regardless of running status
docker images
docker pull postgres:12-alpine
docker run --name postgres12 -p 5432:5432 -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=secret -d postgres:12-alpine
docker exec -it postgres12 psql -U postgres // run psql console(client)
\q
docker logs postgres12

docker rm postgres12 : remove container
docker stop postgres12
docker start postgres12

docker exec -it postgres12 /bin/sh  : CLI into docker container

create and login to db in docker CLI:
createdb --username=root --owner=root simple_bank
then could use normal postgres cmd

psql simple_bank
dropdb xxx
exit


migrate create -ext sql -dir db/migration -seq init_schema : create migrate sql (up ad down)
migrate -path db/migration -database "postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable" -verbose up

---------

For Make file:
https://stackoverflow.com/questions/16931770/makefile4-missing-separator-stop
cat -e -t -v makefile_name

For linux:
history | grep "docker run"

for postgres:
if you can not execute: migrate -path db/migration -database "postgresql://postgres:secret@localhost:5432/simple_bank?sslmode=disable" -verbose up
that is because :
https://stackoverflow.com/questions/48593016/postgresql-docker-role-does-not-exist
so need to do:
brew services stop postgresql




-----------
go module
go mod init smallcoding.localhost/docker_go_postgres


------------

postgres trx isolation:
(1) check isolation level
show transaction isolation level;
(2) in postgres, we ca only change isolation level in transaction and it is taking effect only during that transaction
so :
bigin;
set transaction isolation level read uncommitted;
...
commit;

(3) read uncommitted is working just like read committed in postgres, so in postgres, there is only 3 isolation level actually, it is diffenrent
    from mysql
(4) in read committed isolation level, phantom read and unrepeatable read will happen in transaction, just like mysql
(5) in repeatable read isolation level, phantom read and unrepeatable read will not happen in transaction!
    if you want to do update for the same row which has been updated and committed by other transaction, then this transaction will fail;
    if you want to do update for the same row which has been updated and not committed by other transaction yet, then this transaction would be
    queued for lock, after the other transaction commit, this transaction will fail also.
    if you want to do update for the same row which has been updated and not committed by other transaction yet, then this transaction would be
    queued for lock, ad if now the other transaction rollback, this transaction will successfully update this row.
    if 2 transactions are updating 2 different rows, then it has no problem.

(6) in serializable read isolation level, it is the highest level, and insert operation would be fail when commit if another transaction has already insert
    in the same table and commit it already
    however in mysql, if in serializable read isolation level, the limit is much stricter, since mysql using lock ,and even 2 concurrnt select operation
    for the same table is not allowed. postgres not use lock, instread using dependency detection, so it is better
